<s-expression> ::= <atom> | <list>

<list> ::= "(" <s-expressions> ")" | "(" ")"

<s-expressions> ::= <s-expression> | <s-expression> <s-expressions>

<atom> ::= <symbol> | <number> | <string> | <character>

<symbol> ::= <identifier> | <keyword>

<identifier> ::= <initial> <subsequent>* | <special-initial> <subsequent>*

<initial> ::= <letter> | <special-initial>

<special-initial> ::= "!" | "$" | "%" | "&" | "*" | "+" | "-" | "/" | ":" | "<" | "=" | ">" | "?" | "@" | "^" | "_" | "~"

<subsequent> ::= <initial> | <digit> | "."

<keyword> ::= ":" <identifier>

<number> ::= <integer> | <float> | <ratio>

<integer> ::= ["+"|"-"] <digit>+
// floats and ratio not implemented yet
<float> ::= ["+"|"-"] <digit>+ "." <digit>+ ["e" ["+"|"-"] <digit>+]
<ratio> ::= ["+"|"-"] <digit>+ "/" <digit>+

<string> ::= '"' <string-character>* '"'

<string-character> ::= <any-character-except-quote> | '\"'

<character> ::= "#\" <any-character> | "#\" <character-name>

<character-name> ::= "Space" | "Newline" | "Tab" | "Page" | "Rubout" | "Linefeed" | "Return" | "Backspace"

; Special Forms
<special-form> ::= <quote> | <if> | <progn> | <lambda> | <let> | <setq>

<quote> ::= "'" <s-expression> | "(quote" <s-expression> ")"

<if> ::= "(if" <s-expression> <s-expression> [<s-expression>] ")"

<progn> ::= "(progn" <s-expressions> ")"

<lambda> ::= "(lambda" "(" <lambda-list> ")" <s-expressions> ")"

<lambda-list> ::= <required-params> [<optional-params>] [<rest-param>] [<key-params>]

<required-params> ::= <symbol>*

<optional-params> ::= "&optional" "(" <symbol> [<init-form> [<supplied-p-parameter>]] ")"*

<rest-param> ::= "&rest" <symbol>

<key-params> ::= "&key" "(" <symbol> [<init-form> [<supplied-p-parameter>]] ")"*

<let> ::= "(let" "(" <binding>* ")" <s-expressions> ")"

<binding> ::= "(" <symbol> <s-expression> ")"

<setq> ::= "(setq" <symbol> <s-expression> ")"

; Function Application
<function-call> ::= "(" <function-name> <s-expression>* ")"

<function-name> ::= <symbol>

; Macros
<macro-call> ::= "(" <macro-name> <s-expression>* ")"

<macro-name> ::= <symbol>
